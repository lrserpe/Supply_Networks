lo <- as.matrix(nodes[,c("LON","LAT")])
plot(graph_BH, vertex.size = 3, layout=lo, vertex.label = NA)
#Betweeness Centrality
#blue = 0 betweenes value, red = highest betweeness value
pal = colorRampPalette(c("blue","green",'yellow','red'))
between_vals <- centr_betw(graph_BH, directed = FALSE)$res
graphCol_bet = pal(100)[as.numeric(cut(between_vals,breaks = 100))]
plot(graph_BH, vertex.color=graphCol_bet, vertex.size = 5, vertex.label = NA, layout=lo)
#Betweeness Centrality
#blue = 0 betweenes value, red = highest betweeness value
pal = colorRampPalette(c("blue","green",'yellow','red'))
between_vals <- centr_betw(graph_BH, directed = FALSE)$res
graphCol_bet = pal(100)[as.numeric(cut(between_vals,breaks = 100))]
plot(graph_BH, vertex.color=graphCol_bet, vertex.size = 5, vertex.label = NA, layout=lo)
#2.1
arcs <- read.csv("input/Arcs_Flooding.csv")
nodes <- read.csv("input/Nodes_Flooding.csv")
#create map with nodes
m <- leaflet(nodes) %>% addTiles() %>% addCircleMarkers(lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 3, label = ~as.character(DZ_Nr))
#add arcs(edges)
for(i in 1:nrow(arcs)){
node_ids <- c(arcs$SOURCE_ID[i], arcs$TARGET_ID[i])
df_pol <- nodes %>% filter(DZ_Nr %in% node_ids)
m <- addPolylines(m, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2) #, stroke = F)
}
#add station markers
m <- addCircleMarkers(m, data = Zst_lonlats_A, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red", radius = 5, fill = FALSE)
m <- addCircleMarkers(m, data =Zst_lonlats_B, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "blue")
#show map
m
#2.1
arcs <- read.csv("input/Arcs_Flooding.csv")
nodes <- read.csv("input/Nodes_Flooding.csv")
#create map with nodes
m <- leaflet(nodes) %>% addTiles() %>% addCircleMarkers(lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 3, label = ~as.character(DZ_Nr))
#add arcs(edges)
for(i in 1:nrow(arcs)){
node_ids <- c(arcs$SOURCE_ID[i], arcs$TARGET_ID[i])
df_pol <- nodes %>% filter(DZ_Nr %in% node_ids)
m <- addPolylines(m, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2) #, stroke = F)
}
#add station markers
m <- addCircleMarkers(m, data = Zst_lonlats_A, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red", radius = 5, fill = FALSE)
m <- addCircleMarkers(m, data =Zst_lonlats_B, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "blue")
#show map
m
#create network graph from arc and nodes
graph_BH <- graph_from_data_frame(d = arcs[,2:3], vertices = nodes, directed = FALSE)
lo <- as.matrix(nodes[,c("LON","LAT")])
plot(graph_BH, vertex.size = 3, layout=lo, vertex.label = NA)
#Betweeness Centrality
#blue = 0 betweenes value, red = highest betweeness value
pal = colorRampPalette(c("blue","green",'yellow','red'))
between_vals <- centr_betw(graph_BH, directed = FALSE)$res
graphCol_bet = pal(100)[as.numeric(cut(between_vals,breaks = 100))]
plot(graph_BH, vertex.color=graphCol_bet, vertex.size = 5, vertex.label = NA, layout=lo)
#Remove node where large deviation occurred
arcs_dev <- arcs %>% filter(!(SOURCE_ID %in% c(9180, 9026) & TARGET_ID %in% c(9026, 9180)))
graph_BH_dev <- graph_from_data_frame(d = arcs_dev[,2:3], vertices = nodes, directed = F)
vals_between_dev <- centr_betw(graph_BH_dev, directed = FALSE)$res
rel_change <- ifelse(between_vals > 0, (vals_between_dev - between_vals)/between_vals, 0)
plot(graph_BH_dev, vertex.color=graphCol_bet, vertex.size = 5, vertex.label = NA, layout=lo)
graphCol_dev = rep("white",length(rel_change))
nodes_dev <- nodes %>% mutate(rel_change = rel_change, bet= vals_between, betdev = vals_between_dev) %>% mutate(rel_color = ifelse(rel_change==0, "White", ifelse(rel_change<0, "red", "blue")))
setwd("C:/Users/louis/UNI_SSE/Reslience_of_Supply_Networks/Project/Supply_Networks")
library(dplyr)
library(ggplot2)
library(leaflet)
library(igraph)
df_BH <- read.csv("input/dataA_2013_BH_June.csv")
df_BB <-  read.csv("input/dataB_2013_BH_June.csv")
#Finding deviations
#For all data points with the same station, date, weekday
#Sum hourly values to daily values
#for Autobahn
df_daily_A <- df_BH %>% group_by( Zst, Datum, Wotag)%>%
summarise(SUM_KFZ_R1 = sum(KFZ_R1, na.rm = TRUE), SUM_KFZ_R2 = sum(KFZ_R2, na.rm = TRUE))
#for bundestrasse
df_daily_B <- df_BB %>% group_by( Zst, Datum, Wotag)%>%
summarise(SUM_KFZ_R1 = sum(KFZ_R1, na.rm = TRUE), SUM_KFZ_R2 = sum(KFZ_R2, na.rm = TRUE))
#create new column to assign dates a number (1-30)
alldates <- sort(unique(df_daily_A$Datum))
alldates_values <- seq(1:length(alldates))
names(alldates_values) <- alldates
#add new index column to df
df_daily_A <- df_daily_A %>% mutate(day = alldates_values[as.character(Datum)])
df_daily_B <- df_daily_B %>% mutate(day = alldates_values[as.character(Datum)])
#calculate relative difference from mean
#filter data to from groups with same counter device and weekday
#use mutate function to add column with mean of sum KZR1, KZR2
#use mutate again to add column for difference between mean and KZR1 value
df_mean_A <- df_daily_A %>%  group_by( Zst, Wotag) %>%
mutate(MEAN_KFZ_R1 = mean(SUM_KFZ_R1, na.rm = TRUE), MEAN_KFZ_R2 = mean(SUM_KFZ_R2, na.rm = TRUE)) %>%
mutate(DIFF_R1 = 100*(SUM_KFZ_R1-MEAN_KFZ_R1)/MEAN_KFZ_R1, DIFF_R2 = 100*(SUM_KFZ_R2-MEAN_KFZ_R2)/MEAN_KFZ_R2)
df_mean_B <- df_daily_B %>%  group_by( Zst, Wotag) %>%
mutate(MEAN_KFZ_R1 = mean(SUM_KFZ_R1, na.rm = TRUE), MEAN_KFZ_R2 = mean(SUM_KFZ_R2, na.rm = TRUE)) %>%
mutate(DIFF_R1 = 100*(SUM_KFZ_R1-MEAN_KFZ_R1)/MEAN_KFZ_R1, DIFF_R2 = 100*(SUM_KFZ_R2-MEAN_KFZ_R2)/MEAN_KFZ_R2)
#identify columns where relative diff is below 50%
df_dev_A <- df_mean_A %>% filter(DIFF_R1 < -50 | DIFF_R2 < -50 )
df_dev_B <- df_mean_B %>% filter(DIFF_R1 < -50 | DIFF_R2 < -50 )
#identify days with normal traffic patterns
df_dev_low_A <- df_mean_A %>% filter(DIFF_R1 == 0 | DIFF_R2 ==0 )
df_dev_low_B <- df_mean_B %>% filter(DIFF_R1 < -1 | DIFF_R2 < -1 )
#plot deviations at different stations
ggplot(df_dev_A, aes(x=day)) + geom_line(aes(y=DIFF_R1, color = "R1")) +geom_line(aes(y=DIFF_R2, color = "R2")) + facet_wrap(~Zst) + xlim(2,7) + theme_bw()
library(leaflet)
df_lonlats <- read.table("input/Jawe2013.csv", sep = ";", header=TRUE) %>%
mutate(lat = as.numeric(gsub(",",".",Koor_WGS84_N)),
lon =  as.numeric(gsub(",",".",Koor_WGS84_E)))
selected_Zst <- unique(df_mean_A$Zst)
Zst_lonlats_A <- df_lonlats %>% filter(DZ_Nr %in% selected_Zst)
selected_Zst_B <- unique(df_mean_B$Zst)
Zst_lonlats_B <- df_lonlats %>% filter(DZ_Nr %in% selected_Zst_B)
map_A <- leaflet(Zst_lonlats_A) %>% addTiles() %>%
addCircleMarkers(lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red")
map_A <-  addCircleMarkers(map_A, data =Zst_lonlats_B, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "blue")
arcs_dev <- read.csv("input/Arcs_Flooding_removed9028.csv")
nodes_dev <- read.csv("input/Nodes_Flooding_removed9028.csv")
#Remove node where large deviation occurred
arcs_dev <- read.csv("input/Arcs_Flooding_removed9028.csv")
nodes_dev <- read.csv("input/Nodes_Flooding_removed9028.csv")
#create map with nodes
m_dev <- leaflet(nodes_dev) %>% addTiles() %>% addCircleMarkers(lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 3, label = ~as.character(DZ_Nr))
#add arcs(edges)
for(i in 1:nrow(arcs_dev)){
node_ids <- c(arcs_dev$SOURCE_ID[i], arcs_dev$TARGET_ID[i])
df_pol <- nodes_dev %>% filter(DZ_Nr %in% node_ids)
m_dev <- addPolylines(m_dev, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2) #, stroke = F)
}
#add station markers
m_dev <- addCircleMarkers(m_dev, data = Zst_lonlats_A, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red", radius = 5, fill = FALSE)
m_dev <- addCircleMarkers(m_dev, data =Zst_lonlats_B, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "blue")
#show map
m_dev
arcs_dev <- read.csv("input/Arcs_Flooding_removed9028.csv")
nodes_dev <- read.csv("input/Nodes_Flooding_removed9028.csv")
#create map with nodes
m_dev <- leaflet(nodes_dev) %>% addTiles() %>% addCircleMarkers(lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 3, label = ~as.character(DZ_Nr))
#add arcs(edges)
for(i in 1:nrow(arcs_dev)){
node_ids <- c(arcs_dev$SOURCE_ID[i], arcs_dev$TARGET_ID[i])
df_pol <- nodes_dev %>% filter(DZ_Nr %in% node_ids)
m_dev <- addPolylines(m_dev, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2) #, stroke = F)
}
m_dev
#2.1
arcs <- read.csv("input/Arcs_Flooding.csv")
nodes <- read.csv("input/Nodes_Flooding.csv")
#create map with nodes
m <- leaflet(nodes) %>% addTiles() %>% addCircleMarkers(lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 3, label = ~as.character(DZ_Nr))
#add arcs(edges)
for(i in 1:nrow(arcs)){
node_ids <- c(arcs$SOURCE_ID[i], arcs$TARGET_ID[i])
df_pol <- nodes %>% filter(DZ_Nr %in% node_ids)
m <- addPolylines(m, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2) #, stroke = F)
}
#add station markers
m <- addCircleMarkers(m, data = Zst_lonlats_A, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red", radius = 5, fill = FALSE)
m <- addCircleMarkers(m, data =Zst_lonlats_B, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "blue")
#show map
m
arcs_dev <- read.csv("input/Arcs_Flooding_removed9028.csv")
nodes_dev <- read.csv("input/Nodes_Flooding_removed9028.csv")
#create map with nodes
m_dev <- leaflet(nodes_dev) %>% addTiles() %>% addCircleMarkers(lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 3, label = ~as.character(DZ_Nr))
arcs_dev <- read.csv("input/Arcs_Flooding_removed9028.csv")
nodes_dev <- read.csv("input/Nodes_Flooding_removed9028.csv")
#create map with nodes
m_dev <- leaflet(nodes_dev) %>% addTiles() %>% addCircleMarkers(lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 3, label = ~as.character(DZ_Nr))
#add arcs(edges)
for(i in 1:nrow(arcs_dev)){
node_ids <- c(arcs_dev$SOURCE_ID[i], arcs_dev$TARGET_ID[i])
df_pol <- nodes_dev %>% filter(DZ_Nr %in% node_ids)
m_dev <- addPolylines(m_dev, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2) #, stroke = F)
}
m_dev
#Remove node where large deviation occurred
arcs_dev <- read.csv("input/Arcs_Flooding_removed9028.csv")
nodes_dev <- read.csv("input/Nodes_Flooding_removed9028.csv")
#create map with nodes
m_dev <- leaflet(nodes_dev) %>% addTiles() %>% addCircleMarkers(lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 3, label = ~as.character(DZ_Nr))
#add arcs(edges)
for(i in 1:nrow(arcs_dev)){
node_ids <- c(arcs_dev$SOURCE_ID[i], arcs_dev$TARGET_ID[i])
df_pol <- nodes_dev %>% filter(DZ_Nr %in% node_ids)
m_dev <- addPolylines(m_dev, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2) #, stroke = F)
}
m_dev
#create network graph from arc and nodes with deviation removed
graph_BH_dev <- graph_from_data_frame(d = arcs_dev[,2:3], vertices = nodes_dev, directed = FALSE)
#create network graph from arc and nodes with deviation removed
graph_BH_dev <- graph_from_data_frame(d = arcs_dev[,2:3], vertices = nodes_dev, directed = FALSE)
#Remove node where large deviation occurred
arcs_dev <- read.csv("input/Arcs_Flooding_removed9028.csv")
nodes_dev <- read.csv("input/Nodes_Flooding_removed9028.csv")
#create map with nodes
m_dev <- leaflet(nodes_dev) %>% addTiles() %>% addCircleMarkers(lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 3, label = ~as.character(DZ_Nr))
#add arcs(edges)
for(i in 1:nrow(arcs_dev)){
node_ids <- c(arcs_dev$SOURCE_ID[i], arcs_dev$TARGET_ID[i])
df_pol <- nodes_dev %>% filter(DZ_Nr %in% node_ids)
m_dev <- addPolylines(m_dev, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2) #, stroke = F)
}
m_dev
#add station markers
m_dev <- addCircleMarkers(m_dev, data = Zst_lonlats_A, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red", radius = 5, fill = FALSE)
m_dev <- addCircleMarkers(m_dev, data =Zst_lonlats_B, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "blue")
#show map
m_dev
#create network graph from arc and nodes with deviation removed
graph_BH_dev <- graph_from_data_frame(d = arcs_dev[,2:3], vertices = nodes_dev, directed = FALSE)
#create network graph from arc and nodes with deviation removed
graph_BH_dev <- graph_from_data_frame(d = arcs_dev[,2:3], vertices = nodes_dev, directed = FALSE)
#create network graph from arc and nodes with deviation removed
graph_BH_dev <- graph_from_data_frame(d = arcs_dev[,2:3], vertices = nodes_dev, directed = FALSE)
#create network graph from arc and nodes with deviation removed
graph_BH_dev <- graph_from_data_frame(d = arcs_dev[,2:3], vertices = nodes_dev, directed = FALSE)
#Remove node where large deviation occurred
arcs_dev <- read.csv("input/Arcs_Flooding_removed9028.csv")
nodes_dev <- read.csv("input/Nodes_Flooding_removed9028.csv")
#create map with nodes
m_dev <- leaflet(nodes_dev) %>% addTiles() %>% addCircleMarkers(lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 3, label = ~as.character(DZ_Nr))
#add arcs(edges)
for(i in 1:nrow(arcs_dev)){
node_ids <- c(arcs_dev$SOURCE_ID[i], arcs_dev$TARGET_ID[i])
df_pol <- nodes_dev %>% filter(DZ_Nr %in% node_ids)
m_dev <- addPolylines(m_dev, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2) #, stroke = F)
}
m_dev
#add station markers
m_dev <- addCircleMarkers(m_dev, data = Zst_lonlats_A, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red", radius = 5, fill = FALSE)
m_dev <- addCircleMarkers(m_dev, data =Zst_lonlats_B, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "blue")
#show map
m_dev
#Remove node where large deviation occurred
arcs_dev <- read.csv("input/Arcs_Flooding_removed9028.csv")
nodes_dev <- read.csv("input/Nodes_Flooding_removed9028.csv")
#create map with nodes
m_dev <- leaflet(nodes_dev) %>% addTiles() %>% addCircleMarkers(lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 3, label = ~as.character(DZ_Nr))
#add arcs(edges)
for(i in 1:nrow(arcs_dev)){
node_ids <- c(arcs_dev$SOURCE_ID[i], arcs_dev$TARGET_ID[i])
df_pol <- nodes_dev %>% filter(DZ_Nr %in% node_ids)
m_dev <- addPolylines(m_dev, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2) #, stroke = F)
}
m_dev
#add station markers
m_dev <- addCircleMarkers(m_dev, data = Zst_lonlats_A, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red", radius = 5, fill = FALSE)
m_dev <- addCircleMarkers(m_dev, data =Zst_lonlats_B, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "blue")
#show map
m_dev
#create network graph from arc and nodes with deviation removed
graph_BH_dev <- graph_from_data_frame(d = arcs_dev[,2:3], vertices = nodes_dev, directed = FALSE)
lo <- as.matrix(nodes_dev[,c("LON","LAT")])
plot(graph_BH_dev, vertex.size = 3, layout=lo, vertex.label = NA)
#Betweeness Centrality with deviaiton removed
#blue = 0 betweenes value, red = highest betweeness value
pal = colorRampPalette(c("blue","green",'yellow','red'))
between_vals <- centr_betw(graph_BH, directed = FALSE)$res
#Betweeness Centrality with deviaiton removed
#blue = 0 betweenes value, red = highest betweeness value
pal = colorRampPalette(c("blue","green",'yellow','red'))
between_vals_dev <- centr_betw(graph_BH_dev, directed = FALSE)$res
graphCol_bet = pal(100)[as.numeric(cut(between_vals,breaks = 100))]
#Betweeness Centrality with deviaiton removed
#blue = 0 betweenes value, red = highest betweeness value
pal = colorRampPalette(c("blue","green",'yellow','red'))
between_vals_dev <- centr_betw(graph_BH_dev, directed = FALSE)$res
graphCol_bet = pal(100)[as.numeric(cut(between_vals_dev,breaks = 100))]
plot(graph_BH_dev, vertex.color=graphCol_bet, vertex.size = 5, vertex.label = NA, layout=lo)
#Betweeness Centrality
#blue = 0 betweenes value, red = highest betweeness value
pal = colorRampPalette(c("blue","green",'yellow','red'))
between_vals <- centr_betw(graph_BH, directed = FALSE)$res
#2.1
arcs <- read.csv("input/Arcs_Flooding.csv")
nodes <- read.csv("input/Nodes_Flooding.csv")
#create map with nodes
m <- leaflet(nodes) %>% addTiles() %>% addCircleMarkers(lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 3, label = ~as.character(DZ_Nr))
#add arcs(edges)
for(i in 1:nrow(arcs)){
node_ids <- c(arcs$SOURCE_ID[i], arcs$TARGET_ID[i])
df_pol <- nodes %>% filter(DZ_Nr %in% node_ids)
m <- addPolylines(m, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2) #, stroke = F)
}
#add station markers
m <- addCircleMarkers(m, data = Zst_lonlats_A, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red", radius = 5, fill = FALSE)
m <- addCircleMarkers(m, data =Zst_lonlats_B, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "blue")
#show map
m
#create network graph from arc and nodes
graph_BH <- graph_from_data_frame(d = arcs[,2:3], vertices = nodes, directed = FALSE)
lo <- as.matrix(nodes[,c("LON","LAT")])
plot(graph_BH, vertex.size = 3, layout=lo, vertex.label = NA)
#Betweeness Centrality
#blue = 0 betweenes value, red = highest betweeness value
pal = colorRampPalette(c("blue","green",'yellow','red'))
between_vals <- centr_betw(graph_BH, directed = FALSE)$res
graphCol_bet = pal(100)[as.numeric(cut(between_vals,breaks = 100))]
plot(graph_BH, vertex.color=graphCol_bet, vertex.size = 5, vertex.label = NA, layout=lo)
#create network graph from arc and nodes with deviation removed
graph_BH_dev <- graph_from_data_frame(d = arcs_dev[,2:3], vertices = nodes_dev, directed = FALSE)
lo <- as.matrix(nodes_dev[,c("LON","LAT")])
plot(graph_BH_dev, vertex.size = 3, layout=lo, vertex.label = NA)
#Betweeness Centrality with deviaiton removed
#blue = 0 betweenes value, red = highest betweeness value
pal = colorRampPalette(c("blue","green",'yellow','red'))
between_vals_dev <- centr_betw(graph_BH_dev, directed = FALSE)$res
graphCol_bet = pal(100)[as.numeric(cut(between_vals_dev,breaks = 100))]
plot(graph_BH_dev, vertex.color=graphCol_bet, vertex.size = 5, vertex.label = NA, layout=lo)
#Betweeness Centrality
#blue = 0 betweenes value, red = highest betweeness value
pal = colorRampPalette(c("blue","green",'yellow','red'))
between_vals <- centr_betw(graph_BH, directed = FALSE)$res
graphCol_bet = pal(100)[as.numeric(cut(between_vals,breaks = 100))]
plot(graph_BH, vertex.color=graphCol_bet, vertex.size = 5, vertex.label = NA, layout=lo)
#create network graph from arc and nodes
graph_BH <- graph_from_data_frame(d = arcs[,2:3], vertices = nodes, directed = FALSE)
lo <- as.matrix(nodes[,c("LON","LAT")])
plot(graph_BH, vertex.size = 3, layout=lo, vertex.label = NA)
#Betweeness Centrality
#blue = 0 betweenes value, red = highest betweeness value
pal = colorRampPalette(c("blue","green",'yellow','red'))
between_vals <- centr_betw(graph_BH, directed = FALSE)$res
graphCol_bet = pal(100)[as.numeric(cut(between_vals,breaks = 100))]
plot(graph_BH, vertex.color=graphCol_bet, vertex.size = 5, vertex.label = NA, layout=lo)
#Betweeness Centrality with deviaiton removed
#blue = 0 betweenes value, red = highest betweeness value
pal = colorRampPalette(c("blue","green",'yellow','red'))
between_vals_dev <- centr_betw(graph_BH_dev, directed = FALSE)$res
graphCol_bet = pal(100)[as.numeric(cut(between_vals_dev,breaks = 100))]
plot(graph_BH_dev, vertex.color=graphCol_bet, vertex.size = 5, vertex.label = NA, layout=lo)
#Remove node where large deviation occurred
arcs_dev <- read.csv("input/Arcs_Flooding_removed9028.csv")
nodes_dev <- read.csv("input/Nodes_Flooding_removed9028.csv")
#create map with nodes
m_dev <- leaflet(nodes_dev) %>% addTiles() %>% addCircleMarkers(lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 3, label = ~as.character(DZ_Nr))
#add arcs(edges)
for(i in 1:nrow(arcs_dev)){
node_ids <- c(arcs_dev$SOURCE_ID[i], arcs_dev$TARGET_ID[i])
df_pol <- nodes_dev %>% filter(DZ_Nr %in% node_ids)
m_dev <- addPolylines(m_dev, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2) #, stroke = F)
}
m_dev
#add station markers
m_dev <- addCircleMarkers(m_dev, data = Zst_lonlats_A, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red", radius = 5, fill = FALSE)
m_dev <- addCircleMarkers(m_dev, data =Zst_lonlats_B, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "blue")
#show map
m_dev
#create network graph from arc and nodes with deviation removed
graph_BH_dev <- graph_from_data_frame(d = arcs_dev[,2:3], vertices = nodes_dev, directed = FALSE)
lo <- as.matrix(nodes_dev[,c("LON","LAT")])
plot(graph_BH_dev, vertex.size = 3, layout=lo, vertex.label = NA)
#Betweeness Centrality with deviaiton removed
#blue = 0 betweenes value, red = highest betweeness value
pal = colorRampPalette(c("blue","green",'yellow','red'))
between_vals_dev <- centr_betw(graph_BH_dev, directed = FALSE)$res
graphCol_bet = pal(100)[as.numeric(cut(between_vals_dev,breaks = 100))]
plot(graph_BH_dev, vertex.color=graphCol_bet, vertex.size = 5, vertex.label = NA, layout=lo)
#Compare betweeness centrality before and after deviation removed
rel_change <- ifelse(between_vals > 0, (vals_between_dev - between_vals)/between_vals, 0)
#Compare betweeness centrality before and after deviation removed
rel_change <- ifelse(between_vals > 0, (between_vals_dev - between_vals)/between_vals, 0)
#plot igraph:
#use 3 colors: red - decrease, white - no change, blue - increase
graphCol_dev = rep("white",length(rel_change))
nodes_dev <- nodes %>% mutate(rel_change = rel_change, bet= between_vals, betdev = vals_between_dev) %>% mutate(rel_color = ifelse(rel_change==0, "White", ifelse(rel_change<0, "red", "blue")))
#Compare betweeness centrality before and after deviation removed
rel_change <- ifelse(between_vals > 0, (between_vals_dev - between_vals)/between_vals, 0)
#plot igraph:
#use 3 colors: red - decrease, white - no change, blue - increase
graphCol_dev = rep("white",length(rel_change))
nodes_dev <- nodes %>% mutate(rel_change = rel_change, bet= between_vals, betdev = between_vals_dev) %>% mutate(rel_color = ifelse(rel_change==0, "White", ifelse(rel_change<0, "red", "blue")))
View(nodes)
View(nodes)
#Remove node where large deviation occurred
arcs_dev <- read.csv("input/Arcs_Flooding_removed9028.csv")
nodes_dev <- read.csv("input/Nodes_Flooding.csv")
#create map with nodes
m_dev <- leaflet(nodes_dev) %>% addTiles() %>% addCircleMarkers(lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 3, label = ~as.character(DZ_Nr))
#add arcs(edges)
for(i in 1:nrow(arcs_dev)){
node_ids <- c(arcs_dev$SOURCE_ID[i], arcs_dev$TARGET_ID[i])
df_pol <- nodes_dev %>% filter(DZ_Nr %in% node_ids)
m_dev <- addPolylines(m_dev, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2) #, stroke = F)
}
m_dev
#add station markers
m_dev <- addCircleMarkers(m_dev, data = Zst_lonlats_A, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red", radius = 5, fill = FALSE)
m_dev <- addCircleMarkers(m_dev, data =Zst_lonlats_B, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "blue")
#show map
m_dev
#create network graph from arc and nodes with deviation removed
graph_BH_dev <- graph_from_data_frame(d = arcs_dev[,2:3], vertices = nodes_dev, directed = FALSE)
lo <- as.matrix(nodes_dev[,c("LON","LAT")])
plot(graph_BH_dev, vertex.size = 3, layout=lo, vertex.label = NA)
#Betweeness Centrality with deviaiton removed
#blue = 0 betweenes value, red = highest betweeness value
pal = colorRampPalette(c("blue","green",'yellow','red'))
between_vals_dev <- centr_betw(graph_BH_dev, directed = FALSE)$res
graphCol_bet = pal(100)[as.numeric(cut(between_vals_dev,breaks = 100))]
plot(graph_BH_dev, vertex.color=graphCol_bet, vertex.size = 5, vertex.label = NA, layout=lo)
#Compare betweeness centrality before and after deviation removed
rel_change <- ifelse(between_vals > 0, (between_vals_dev - between_vals)/between_vals, 0)
#plot igraph:
#use 3 colors: red - decrease, white - no change, blue - increase
graphCol_dev = rep("white",length(rel_change))
nodes_dev <- nodes %>% mutate(rel_change = rel_change, bet= between_vals, betdev = between_vals_dev) %>% mutate(rel_color = ifelse(rel_change==0, "White", ifelse(rel_change<0, "red", "blue")))
plot(graph_BH_dev, vertex.color=nodes_dev$rel_color, vertex.size = 5, vertex.label = NA, layout=lo)
#plot leaflet map:
#Here we implemented a more complicated color scheme, such that we have white for no change even if the values are not symmetric (you can do a simpler scale)
minVal <- abs(min(rel_change))
maxVal <- abs(max(rel_change))
rc1 <- colorRampPalette(colors = c("white", "blue"), space = "Lab")(maxVal*10)
rc2 <- colorRampPalette(colors = c("red", "white"), space = "Lab")(minVal*10)
rampcols <- c(rc2, rc1)
col_pal <- colorNumeric(palette = rampcols, domain =rel_change)
m2 <- leaflet(nodes_dev) %>% addTiles()
for(i in 1:nrow(arcs_dev)){
node_ids <- c(arcs_dev$SOURCE_ID[i], arcs_dev$TARGET_ID[i])
df_pol <- nodes %>% filter(FID %in% node_ids)
m2 <- addPolylines(m2, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2)
}
#plot leaflet map:
#Here we implemented a more complicated color scheme, such that we have white for no change even if the values are not symmetric (you can do a simpler scale)
minVal <- abs(min(rel_change))
maxVal <- abs(max(rel_change))
rc1 <- colorRampPalette(colors = c("white", "blue"), space = "Lab")(maxVal*10)
rc2 <- colorRampPalette(colors = c("red", "white"), space = "Lab")(minVal*10)
rampcols <- c(rc2, rc1)
col_pal <- colorNumeric(palette = rampcols, domain =rel_change)
m2 <- leaflet(nodes_dev) %>% addTiles()
for(i in 1:nrow(arcs_dev)){
node_ids <- c(arcs_dev$SOURCE_ID[i], arcs_dev$TARGET_ID[i])
df_pol <- nodes %>% filter(DZ_Nr %in% node_ids)
m2 <- addPolylines(m2, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2)
}
m2 <- addCircleMarkers(m2, lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 5,fillOpacity = 1, fillColor = ~col_pal(rel_change), label = ~as.character(rel_change)) %>% addLegend(position = "bottomleft", pal = col_pal, values = ~rel_change, title = as.character("Dev"),opacity = 1)
m2 <- addCircleMarkers(m2, data = Zst_lonlats, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red", radius = 5, fill = FALSE)
#plot leaflet map:
#Here we implemented a more complicated color scheme, such that we have white for no change even if the values are not symmetric (you can do a simpler scale)
minVal <- abs(min(rel_change))
maxVal <- abs(max(rel_change))
rc1 <- colorRampPalette(colors = c("white", "blue"), space = "Lab")(maxVal*10)
rc2 <- colorRampPalette(colors = c("red", "white"), space = "Lab")(minVal*10)
rampcols <- c(rc2, rc1)
col_pal <- colorNumeric(palette = rampcols, domain =rel_change)
m2 <- leaflet(nodes_dev) %>% addTiles()
for(i in 1:nrow(arcs_dev)){
node_ids <- c(arcs_dev$SOURCE_ID[i], arcs_dev$TARGET_ID[i])
df_pol <- nodes %>% filter(DZ_Nr %in% node_ids)
m2 <- addPolylines(m2, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2)
}
m2 <- addCircleMarkers(m2, lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 5,fillOpacity = 1, fillColor = ~col_pal(rel_change), label = ~as.character(rel_change)) %>% addLegend(position = "bottomleft", pal = col_pal, values = ~rel_change, title = as.character("Dev"),opacity = 1)
m2 <- addCircleMarkers(m2, data = Zst_lonlats_A, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red", radius = 5, fill = FALSE)
m2
#plot leaflet map:
#Here we implemented a more complicated color scheme, such that we have white for no change even if the values are not symmetric (you can do a simpler scale)
minVal <- abs(min(rel_change))
maxVal <- abs(max(rel_change))
rc1 <- colorRampPalette(colors = c("white", "blue"), space = "Lab")(maxVal*10)
rc2 <- colorRampPalette(colors = c("red", "white"), space = "Lab")(minVal*10)
rampcols <- c(rc2, rc1)
col_pal <- colorNumeric(palette = rampcols, domain =rel_change)
m2 <- leaflet(nodes_dev) %>% addTiles()
for(i in 1:nrow(arcs_dev)){
node_ids <- c(arcs_dev$SOURCE_ID[i], arcs_dev$TARGET_ID[i])
df_pol <- nodes %>% filter(DZ_Nr %in% node_ids)
m2 <- addPolylines(m2, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2)
}
m2 <- addCircleMarkers(m2, lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 5,fillOpacity = 1, fillColor = ~col_pal(rel_change), label = ~as.character(rel_change)) %>% addLegend(position = "bottomleft", pal = col_pal, values = ~rel_change, title = as.character("Dev"),opacity = 1)
m2 <- addCircleMarkers(m2, data = Zst_lonlats_A, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red", radius = 5, fill = FALSE)
m2 <- addCircleMarkers(m2, data = Zst_lonlats_B, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red", radius = 5, fill = FALSE)
m2
#Betweeness Centrality
#blue = 0 betweenes value, red = highest betweeness value
pal = colorRampPalette(c("blue","green",'yellow','red'))
between_vals <- centr_betw(graph_BH, directed = FALSE)$res
graphCol_bet = pal(100)[as.numeric(cut(between_vals,breaks = 100))]
plot(graph_BH, vertex.color=graphCol_bet, vertex.size = 5, vertex.label = NA, layout=lo)
#Remove node where large deviation occurred
arcs_dev <- read.csv("input/Arcs_Flooding_removed9028.csv")
nodes_dev <- read.csv("input/Nodes_Flooding.csv")
#create map with nodes
m_dev <- leaflet(nodes_dev) %>% addTiles() %>% addCircleMarkers(lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 3, label = ~as.character(DZ_Nr))
#add arcs(edges)
for(i in 1:nrow(arcs_dev)){
node_ids <- c(arcs_dev$SOURCE_ID[i], arcs_dev$TARGET_ID[i])
df_pol <- nodes_dev %>% filter(DZ_Nr %in% node_ids)
m_dev <- addPolylines(m_dev, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2) #, stroke = F)
}
m_dev
#add station markers
m_dev <- addCircleMarkers(m_dev, data = Zst_lonlats_A, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red", radius = 5, fill = FALSE)
m_dev <- addCircleMarkers(m_dev, data =Zst_lonlats_B, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "blue") %>% addLegend(position = "bottomleft", pal = graphCol_bet, values = ~between_vals, title = as.character("Betweeness"),opacity = 1)
#Remove node where large deviation occurred
arcs_dev <- read.csv("input/Arcs_Flooding_removed9028.csv")
nodes_dev <- read.csv("input/Nodes_Flooding.csv")
#create map with nodes
m_dev <- leaflet(nodes_dev) %>% addTiles() %>% addCircleMarkers(lat = ~LAT ,lng = ~LON, weight = 1, opacity = 1, radius = 3, label = ~as.character(DZ_Nr))
#add arcs(edges)
for(i in 1:nrow(arcs_dev)){
node_ids <- c(arcs_dev$SOURCE_ID[i], arcs_dev$TARGET_ID[i])
df_pol <- nodes_dev %>% filter(DZ_Nr %in% node_ids)
m_dev <- addPolylines(m_dev, data = df_pol, lng = ~LON, lat = ~LAT, opacity = 0.9, group = "mylines", weight = 2) #, stroke = F)
}
m_dev
#add station markers
m_dev <- addCircleMarkers(m_dev, data = Zst_lonlats_A, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "red", radius = 5, fill = FALSE)
m_dev <- addCircleMarkers(m_dev, data =Zst_lonlats_B, lat = ~lat ,lng = ~lon ,label = ~as.character(DZ_Nr), color = "blue")
#show map
m_dev
